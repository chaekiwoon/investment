<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/gameStyle.css' />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="phaser.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <style type="text/css"> 
      a { text-decoration:none } 
    </style> 
  </head>

  <body id="titleBody" >
    <header>
      <a href="/"><h1>하늘에서 내리는 봉봉</h1></a>
      <nav>
        <a href="/" id="titleHyper">새로하기</a>
      </nav>
    </header></br>
    <div id="canvas">

    </div>
  </body>

</html>

<script type="text/javascript">
  var game = new Phaser.Game(600, 800, Phaser.CANVAS, 'canvas', { preload: preload, create: create, update: update });
  var keyMove;
  var stocks;
  var counter=30;
  var counterText=0;

  var chartData = [];
  var higherHigh = 0;
  var lowerLow = 10000000;

  var stage=Number(getUrlValue(3));
  var investedmoney=10000;
  var seedmoney;
  var stockcode;
  var PV=investedmoney;

  var earnedmoney1=getUrlValue(4);
  var earnedmoney2=getUrlValue(5);

//sounds
  var scoreup;
  var scoredown;
  var bgm;
  var end;
  var countdown;
  var keys;

  function getUrlValue(idx)
  {
      urlParams=parseURLParams(document.location.href);
      return urlParams[idx];  
  }

  function preload() {
    //sounds
    game.load.audio('scoreup', 'sounds/scoreup.mp3');
    game.load.audio('scoredown', 'sounds/scoredown.mp3');
    game.load.audio('bgm', 'sounds/bgm.mp3');
    game.load.audio('end', 'sounds/end.mp3');
    game.load.audio('countdown', 'sounds/countdown.mp3');
    // game.load.audio('explosion', 'assets/audio/SoundEffects/explosion.mp3');
    // 게임에 필요한 데이터 로드
    
    game.load.spritesheet("player", "images/player.png", 80, 100);
    game.load.image("stock", "images/stock.png");
    game.load.image("red_candle", "images/red_candle.png");
    game.load.image("blue_candle", "images/blue_candle.png");
    game.load.image("background", "images/background.jpg");
  }

  function parseURLParams(url) {
    var queryStart = url.indexOf("?") + 1,
        queryEnd   = url.indexOf("#") + 1 || url.length + 1,
        query = url.slice(queryStart, queryEnd - 1),
        pairs = query.replace(/\+/g, " ").split("&"),
        parms = {}, i, n, v, nv;

    if (query === url || query === "") return;

    for (i = 0; i < pairs.length; i++) {
        nv = pairs[i].split("=", 2);
        n = decodeURIComponent(nv[0]);
        v = decodeURIComponent(nv[1]);

        if (!parms.hasOwnProperty(n)) parms[n] = [];
        parms[n].push(nv.length === 2 ? v : null);
    }
    return parms;
  }

  function getPastStockData(stock_code) {
      $.ajax({
          type: 'get',
          url: `https://sandbox-apigw.koscom.co.kr/v2/market/stocks/kospi/${stock_code}/history?trnsmCycleTpCd=D&inqStrtDd=20181001&inqEndDd=20200129&reqCnt=100`,
          dataType: "json",

          beforeSend: function(request) {
              request.setRequestHeader("apikey","l7xxdde00a17960b4bac946be15d87e0f498");
          },

          success: function (data1) {
            chartData = data1.result.hisLists;
          },
      });

      $.ajax({
          type: 'get',
          url: `https://sandbox-apigw.koscom.co.kr/v2/market/stocks/kospi/${stock_code}/history?trnsmCycleTpCd=D&inqStrtDd=20181001&inqEndDd=20190829&reqCnt=100`,
          dataType: "json",

          beforeSend: function(request) {
              request.setRequestHeader("apikey","l7xxdde00a17960b4bac946be15d87e0f498");
          },

          success: function (data2) {
            chartData = chartData.concat(data2.result.hisLists);

            for (var i = 0; i < 200; i++) {
              higherHigh = higherHigh < chartData[i].hgprc ? chartData[i].hgprc : higherHigh;
              lowerLow = lowerLow > chartData[i].lwprc ? chartData[i].lwprc : lowerLow;
            }
          },
      });
  }

  function create() {
    // 게임 처음 실행시 수행되는 함수
    var link = document.location.href;
    urlParams=parseURLParams(link);
    getPastStockData(urlParams[2]);
    game.physics.startSystem(Phaser.Physics.ARCADE); // 게임 속성 설정(아케이드)
    
 
    game.add.sprite(0, 0, 'background');        // 게임 배경색 설청

    //sounds
    scoreup = game.add.audio('scoreup');
    scoredown = game.add.audio('scoredown');
    bgm = game.add.audio('bgm');
    end = game.add.audio('end');
    countdown = game.add.audio('countdown');
  

    player = game.add.sprite(275,650,"player");
    game.physics.arcade.enable(player);
    player.animations.add("left",[0,1,2,3,4,5],10,true);
    player.animations.add("right",[7,8,9,10,11,12],10,true);

    keyMove = game.input.keyboard.createCursorKeys();
    player.body.gravityScale=0;
    player.body.immovable = true;
    player.health = investedmoney;

    game.sound.setDecodedCallback([ scoreup, scoredown,bgm, end, countdown], start, this);
    init();
  }

  function start() {

  }
  function update() {
    player.body.velocity.setTo(0, 0); // 관성을 0으로 설정
    if (keyMove.left.isDown) {
        if(player.x >= 30 ) {
          player.body.velocity.x = -350;
        }   // player x좌표 위치를 -150 속도로 이동
        player.animations.play("left");  // player에게 'left' 애니메이션 적용
        
    } else if (keyMove.right.isDown) {
        if(player.x <= 480 ) {
          player.body.velocity.x = +350;
        }
  
        player.animations.play("right");
         
    } else {
        player.animations.stop();      // player에게 적용중인 애니메이션을 멈춘다.
        player.frame = 6;              // player의 frame을 3번째 프레임으로 설정한다.
    }
    stocks.forEachAlive(function(stock){
      game.physics.arcade.collide(player, stock, function collisionHandler(obj1, obj2) {

        if(stock.health<100) {
          scoredown.play();
        } else {
          scoreup.play();
        }
        stock.destroy();
        if(counter>=0) {
          player.damage(Math.floor((100-stock.health)*player.health/100));
          PV = player.health;
        }
      }, null, this);
    });

    if(counter==0) {
      end.play();
      setTimeout(function(){
        if(stage==3) {
          post_to_url('score',{
            earnedmoney1:earnedmoney1,
            earnedmoney2:earnedmoney2,
            earnedmoney3:PV-investedmoney
          },'get');
        }
        else {
          if(stage==1)
            earnedmoney1=PV-investedmoney;
          else if(stage==2)
            earnedmoney2=PV-investedmoney;
          var currentMoney=getUrlValue(0)-getUrlValue(1)+PV-investedmoney;
          post_to_url('selection',[currentMoney,'-1','-1',stage+1,earnedmoney1,earnedmoney2],'get');
        }
      },2000);
    }
  }

  function makeStocks() {
    stocks = game.add.group();
    var min = 50;
    var max = 470;
    var middle = 0;
    var candleSize = 1;
    var candleColor = 'red_candle';
    var candleHealth;
    var now = 0;
    for (var i = 1; i <= 120; i++) {
      setTimeout(function() {
        middle = (chartData[now].hgprc + chartData[now].lwprc) / 2;
        middle = (middle - lowerLow) * 420;
        middle = Math.floor(middle / (higherHigh - lowerLow));
        candleHealth = 100 * (chartData[now].trdPrc / chartData[now + 1].trdPrc);
        candleSize = Math.abs((candleHealth) - 100)/30;
        candleColor = chartData[now + 1].trdPrc - chartData[now].trdPrc < 0 ? 'red_candle' : 'blue_candle';
        if (candleColor == 'blue_candle') {
          candleSize = candleSize * 4;
        } else {
          candleSize = candleSize * 2;
        }
        now = now + 1;

        // var random = Math.floor(Math.random() * (+max - +min)) + +min;
        // var tempSprite = game.add.sprite(middle, 80, 'stock');
        var tempSprite = game.add.sprite(middle, 80, candleColor);

        tempSprite.height = 40;
        tempSprite.width = 420 * candleSize;
        tempSprite.health = Math.floor(candleHealth);

        game.physics.enable(tempSprite, Phaser.Physics.ARCADE);
        if (candleColor == 'blue_candle') {
          tempSprite.body.gravity.y=750;
        } else {
          tempSprite.body.gravity.y=450;
        }
        stocks.add(tempSprite);
      }, 4000+500*i);
    }
  }

  function makeTimer() {
    setTimeout(function(){
      text = game.add.text(175, 33, '00:30', { font: "20px Arial", fill: "#ffffff" });
      // text.anchor.setTo(0.5, 13);

      //  Here we'll create a basic looped event.
      //  A looped event is like a repeat event but with no limit, it will literally repeat itself forever, or until you stop it.

      //  The first parameter is how long to wait before the event fires. In this case 1 second (you could pass in 1000 as the value as well.)
      //  The next two parameters are the function to call ('updateCounter') and the context under which that will happen.

      game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);
    }, 4000);
  }

  function makePV() {
    countdown.play();
    setTimeout(function(){
      countertext = game.add.text(345, 33, '30', { font: "20px Arial", fill: "#ffffff" });
      //countertext.anchor.setTo(-2.5, 12);
      var profit_rate = Math.floor((PV/investedmoney)*100) - 100;
      countertext.setText(PV + ' (' + profit_rate + '%)');
      //  Here we'll create a basic looped event.
      //  A looped event is like a repeat event but with no limit, it will literally repeat itself forever, or until you stop it.

      //  The first parameter is how long to wait before the event fires. In this case 1 second (you could pass in 1000 as the value as well.)
      //  The next two parameters are the function to call ('updateCounter') and the context under which that will happen.

      game.time.events.loop(500, updatePV, this);
      bgm.play();
    }, 4000);
  }

  function post_to_url(path, params, method) {
    var form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);
    for (var key in params) {
      var hiddenField = document.createElement("input");
      hiddenField.setAttribute("type", "hidden");
      hiddenField.setAttribute("name", key);
      hiddenField.setAttribute("value", params[key]);
      form.appendChild(hiddenField);
    }
    document.body.appendChild(form);
    form.submit();
  }

  function updateCounter() {
    counter--;
    if(counter>=0) {
      if(counter<10) {
        text.setText("00:0"+counter);
      } else {
        text.setText("00:"+counter);
      }
    }
  }

  function updatePV() {
    var profit_rate = Math.floor((PV/investedmoney)*100) - 100;
    countertext.setText(PV + ' (' + profit_rate + '%)');
  }

  function init() {
    makeStocks();
    makeTimer();
    makePV();
  }
</script>