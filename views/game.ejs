<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="phaser.min.js"></script>
  </head>
  <body>
    hi
  </body>
</html>

<script type="text/javascript">
  var game = new Phaser.Game(600, 800, Phaser.CANVAS, null, { preload: preload, create: create, update: update });
  var keyMove;
  var stocks;
  var counter=30;
  var counterText=0;
  var stage=1;
  var pv=0;

  function preload() {
    // 게임에 필요한 데이터 로드

    game.load.spritesheet("player", "images/player.png", 80, 100);
    game.load.image("stock", "images/stock.png");
  }

  function create() {
    // 게임 처음 실행시 수행되는 함수
    game.physics.startSystem(Phaser.Physics.ARCADE); // 게임 속성 설정(아케이드)
    
    game.stage.backgroundColor = "#2F9D27";         // 게임 배경색 설청
    game.create.texture('sky', ['E'], 800, 80, 0);  // 'E' 코드색상 800x80 크기의 블럭을 'sky' 이름으로 생성
    game.add.sprite(0, 0, 'sky');                   // sky를 x좌표 0, y좌표 0 위치에 추가

    player = game.add.sprite(275,650,"player");
    game.physics.arcade.enable(player);
    player.animations.add("left",[0,1,2],10,true);
    player.animations.add("right",[0,1,2],10,true);

    keyMove = game.input.keyboard.createCursorKeys();
    player.body.gravityScale=0;
    player.body.immovable = true;
    makeStocks();
    makeTimer();
  }

  function update() {
    player.body.velocity.setTo(0, 0); // 관성을 0으로 설정
    if (keyMove.left.isDown) {
        if(player.x >= 50 ) {
          player.body.velocity.x = -350;
        }   // player x좌표 위치를 -150 속도로 이동
        player.animations.play("left");  // player에게 'left' 애니메이션 적용
        
    } else if (keyMove.right.isDown) {
        if(player.x <= 460 ) {
          player.body.velocity.x = +350;
        }
  
        player.animations.play("right");
         
    } else {
        player.animations.stop();      // player에게 적용중인 애니메이션을 멈춘다.
        player.frame = 3;              // player의 frame을 3번째 프레임으로 설정한다.
    }

    stocks.forEachAlive(function(stock){
      game.physics.arcade.collide(player, stock, function collisionHandler(obj1, obj2) {
        stock.destroy();
        console.log("hi");
      }, null, this);
    })
  }

  function makeStocks() {
    stocks = game.add.group();
    var min = 50;
    var max = 470;
    for (var i = 1; i <= 120; i++) {
      setTimeout(function() {
        var random = Math.floor(Math.random() * (+max - +min)) + +min;
        var tempSprite = game.add.sprite(random, 80, 'stock');
        game.physics.enable(tempSprite, Phaser.Physics.ARCADE);
        tempSprite.body.gravity.y=450;
        stocks.add(tempSprite);
      }, 4000+500*i);
    }
  }

  function makeTimer() {
    setTimeout(function(){
      text = game.add.text(game.world.centerX, game.world.centerY, 'Counter: 30', { font: "20px Arial", fill: "#ffffff" });
      text.anchor.setTo(2.5, 12);

      //  Here we'll create a basic looped event.
      //  A looped event is like a repeat event but with no limit, it will literally repeat itself forever, or until you stop it.

      //  The first parameter is how long to wait before the event fires. In this case 1 second (you could pass in 1000 as the value as well.)
      //  The next two parameters are the function to call ('updateCounter') and the context under which that will happen.

      game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);
    }, 4000);
  }

  function updateCounter() {
    counter--;
    text.setText('Counter: ' + counter);
  }

</script>